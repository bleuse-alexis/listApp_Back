#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("listapp-back:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
/**
 * Get port from environment and store in Express.
 */

var portHTTP = normalizePortHTTP(process.env.PORTHTTP || "8080");
var portHTTPS = normalizePortHTTPS(process.env.PORTHTTPS || "4000");

app.set("portHTTP", portHTTP);
app.set("portHTTPS", portHTTPS);

/**
 * Import ssl cert and key file
 */

var privateKey = fs.readFileSync("sslCert/key.pem", "utf8");
var certificate = fs.readFileSync("sslCert/server.crt", "utf8");

var credentials = {
  key: privateKey,
  cert: certificate,
};

/**
 * Create HTTP & HTTPS server.
 */

var serverHTTP = http.createServer(app);
var serverHTTPS = https.createServer(credentials, app);
/**
 * Listen on provided port, on all network interfaces.
 */

serverHTTP.listen(portHTTP);
serverHTTP.on("error", onErrorHTTP);
serverHTTP.on("listening", onListeningHTTP);

serverHTTPS.listen(portHTTPS);
serverHTTPS.on("error", onErrorHTTPS);
serverHTTPS.on("listening", onListeningHTTPS);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePortHTTP(val) {
  var portHTTP = parseInt(val, 10);

  if (isNaN(portHTTP)) {
    // named pipe
    return val;
  }

  if (portHTTP >= 0) {
    // port number
    return portHTTP;
  }

  return false;
}

function normalizePortHTTPS(val) {
  var portHTTPS = parseInt(val, 10);

  if (isNaN(portHTTPS)) {
    // named pipe
    return val;
  }

  if (portHTTPS >= 0) {
    // port number
    return portHTTPS;
  }

  return false;
}

/**
 * Event listener for HTTP & HTTPS server "error" event.
 */

function onErrorHTTP(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof portHTTP === "string" ? "Pipe " + portHTTP : "Port " + portHTTP;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHTTPS(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind =
    typeof portHTTPS === "string" ? "Pipe " + portHTTPS : "Port " + portHTTPS;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP & HTTPS server "listening" event.
 */

function onListeningHTTP() {
  var addr = serverHTTP.address();
  var bind =
    typeof addr === "string" ? "pipe " + addr : "portHTTP " + addr.portHTTP;
  debug("Listening on " + bind);
}

function onListeningHTTPS() {
  var addr = serverHTTPS.address();
  var bind =
    typeof addr === "string" ? "pipe " + addr : "portHTTP " + addr.portHTTPS;
  debug("Listening on " + bind);
}
